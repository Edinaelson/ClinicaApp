@page "/pacientes"
@using Microsoft.EntityFrameworkCore
@inject Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">

    <div class="d-flex justify-end mb-4">
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   OnClick="@OpenAddDialog"
                   StartIcon="@Icons.Material.Filled.PersonAdd"
                   Class="px-6">
            Cadastrar Cliente
        </MudButton>
    </div>
    
    <MudText Typo="Typo.h4" Class="mb-4">Gerenciar Pacientes</MudText>
    
    <MudTextField @bind-Value="SearchTerm"
                  Placeholder="Buscar por nome..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  Class="mb-4"/>
    
    <MudPaper Elevation="3" Class="pa-4">
        <MudDataGrid Items="@filteredPacientes"
                     T="Cliente"
                     Hover="true"
                     Striped="true"
                     Dense="true">

            <Columns>
                <PropertyColumn Property="x => x.Nome" Title="Nome">
                    <CellTemplate Context="paciente">
                        <MudText Style="cursor:pointer;"
                                 @onclick="() => OpenDialog(paciente.Item)">
                            @paciente.Item.Nome
                        </MudText>
                    </CellTemplate>
                </PropertyColumn>
                
                <PropertyColumn Property="x => x.Email" Title="Email">
                    <CellTemplate Context="paciente">
                        <MudText Style="cursor:pointer;"
                                 @onclick="() => OpenDialog(paciente.Item)">
                            @paciente.Item.Email
                        </MudText>
                    </CellTemplate>
                </PropertyColumn>
                
                <PropertyColumn Property="x => x.Telefone" Title="Telefone">
                    <CellTemplate Context="paciente">
                        <MudText Style="cursor:pointer;"
                                 @onclick="() => OpenDialog(paciente.Item)">
                            @paciente.Item.Telefone
                        </MudText>
                    </CellTemplate>
                </PropertyColumn>
                
                <PropertyColumn Property="x => x.DataNascimento" Title="Data de Nascimento">
                    <CellTemplate Context="paciente">
                        <MudText Style="cursor:pointer;"
                                 @onclick="() => OpenDialog(paciente.Item)">
                            @paciente.Item.DataNascimento?.ToString("dd/MM/yyyy")
                        </MudText>
                    </CellTemplate>
                </PropertyColumn>
                
                <TemplateColumn>
                    <CellTemplate Context="paciente">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                        
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="@(() => DeletePaciente(paciente.Item))"/>
                    </CellTemplate>
                </TemplateColumn>
                
            </Columns>

            <PagerContent>
                <MudDataGridPager T="Cliente" />
            </PagerContent>

        </MudDataGrid>

    </MudPaper>
    
</MudContainer>

<div Class="d-flex justify-space-around flex-wrap mt-4">
    <MudBadge Content="3" Overlap="true" Class="mx-6 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
    </MudBadge>
    <MudBadge Content="100" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />
    </MudBadge>
    <MudBadge Icon="@Icons.Material.Filled.Lock" Color="Color.Error" Overlap="true" Bordered="true" Class="mx-6 my-4">
        <MudButton Color="Color.Error" Variant="Variant.Filled" DropShadow="false">Security Issues</MudButton>
    </MudBadge>
    <MudBadge Dot="true" Color="Color.Info" Class="mx-6 my-4">
        <MudText>Bug Reports</MudText>
    </MudBadge>
</div>

@code {

    private async Task DeletePaciente(Cliente paciente)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Deletar Paciente",
            "Tem certeza que deseja deletar este paciente?",
            yesText: "Deletar", cancelText: "Cancelar");
    
        if (result ?? false)
        {
            try
            {
                Db.Clientes.Remove(paciente);
                await Db.SaveChangesAsync();
                pacientes.Remove(paciente);
                filteredPacientes.Remove(paciente);
                Snackbar.Add("Paciente deletado com sucesso!", Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.VisibleStateDuration = 3000;
                });
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erro ao deletar paciente: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenDialog(Cliente paciente)
    {

        var parameters = new DialogParameters
        {
            ["paciente"] = paciente
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var diaolog = DialogService.Show<PacienteEditDialog>("Editar paciente", parameters, options);
        var result = await diaolog.Result;

        if (!result.Canceled && result.Data is Cliente atualizado)
        {
            var index = pacientes.FindIndex(p => p.Id == atualizado.Id);
            if (index != -1)
            {
                pacientes[index] = atualizado;
                FilterPacientes(searchTerm);
            }
        }
    }

private async Task OpenAddDialog()
{
    var options = new DialogOptions
    {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

    var dialog = DialogService.Show<PacienteAddDialog>("Adicionar paciente", options);
    var result = await dialog.Result;

    if (!result.Canceled && result.Data is Cliente novo)
    {
        pacientes.Add(novo);
    }
}
    
    private List<Cliente> pacientes = new();
    private List<Cliente> filteredPacientes = new();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pacientes = await Db.Clientes.ToListAsync();
            filteredPacientes = pacientes; // Inicialmente mostra todos
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar pacientes: {ex.Message}");
        }
    }

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                FilterPacientes(searchTerm);
            }
        }
    }
    
    private void FilterPacientes(string value)
    {
        searchTerm = value; // <-- Atualiza o searchTerm também
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPacientes = pacientes;
        }
        else
        {
            filteredPacientes = pacientes
                .Where(p => p.Nome.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    

}