@page "/pacientes"
@using Microsoft.EntityFrameworkCore
@using ClinicApp.Pages.Dialog
@inject Data.ApplicationDbContext Db
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenButton Text="Cadastrar Cliente"
              Icon="person_add"
              Style="margin-bottom:20px"
              Click="@OpenAddDialog"
              ButtonStyle="ButtonStyle.Success" />

<RadzenTextBox @bind-Value="SearchTerm"
               Placeholder="Buscar por nome..."
               Immediate="true"
               Style="width: 100%; margin-bottom: 10px"
               Adornment="Adornment.Start" />


<RadzenDataGrid TItem="Cliente"
                Data="@filteredPacientes"
                AllowPaging="true"
                PageSize="10"
                AllowFiltering="false"
                AllowSorting="true"
                ColumnWidth="200px"
                ShowPagingSummary="true">

    <Columns>
        <RadzenDataGridColumn TItem="Cliente" Property="Nome" Title="Nome" />
        <RadzenDataGridColumn TItem="Cliente" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="Cliente" Property="Telefone" Title="Telefone"/>
        <RadzenDataGridColumn TItem="Cliente" Property="DataNascimento" Title="Data de Nascimento" 
                              FormatString="{0:dd/MM/yyyy}" />

        <RadzenDataGridColumn TItem="Cliente" Title="Ações">
            <Template Context="paciente">
                <RadzenButton Icon="edit"
                              ButtonStyle="ButtonStyle.Info"
                              Size="ButtonSize.Small"
                              Class="mr-1"
                              Click="@(args => OpenDialog(paciente))"/>
                <RadzenButton Icon="delete"
                              ButtonStyle="ButtonStyle.Danger"
                              Size="ButtonSize.Small"
                              Click="@(args => DeletePaciente(paciente))" />
            </Template>
        </RadzenDataGridColumn>
        
    </Columns>
    
</RadzenDataGrid>

@code {
    private List<Cliente> pacientes = new();
    private List<Cliente> filteredPacientes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pacientes = await Db.Clientes.ToListAsync();
            FilterPacientes(searchTerm);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao carregar pacientes: {ex.Message}");
        }
    }
    private string searchTerm = string.Empty;
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                FilterPacientes(searchTerm);
            }
        }
    }

    private void FilterPacientes(string value)
    {
        searchTerm = value; // <-- Atualiza o searchTerm também
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPacientes = pacientes;
        }
        else
        {
            filteredPacientes = pacientes
                .Where(p => p.Nome.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { Width = "600px", CloseDialogOnEsc = true, ShowClose = true };

        var result = await DialogService.OpenAsync<PacienteAddDialog>(
            "Adicionar paciente",
            parameters: null,
            options: options
        );

        if (result is Cliente novo)
        {
            pacientes.Add(novo);
            FilterPacientes(searchTerm);
            StateHasChanged();
        }
    }


    private async Task OpenDialog(Cliente paciente)
    {
        var options = new DialogOptions
        {
            Width = "600px",
            CloseDialogOnEsc = true,
            ShowClose = true
        };

        var parameters = new Dictionary<string, object>
        {
            { "Paciente", paciente }
        };

        var result = await DialogService.OpenAsync<PacienteEditDialog>(
            "Editar paciente",
            parameters,
            options
        );

        if (result is Cliente atualizado)
        {
            var index = pacientes.FindIndex(p => p.Id == atualizado.Id);
            if (index != -1)
            {
                pacientes[index] = atualizado;
                FilterPacientes(searchTerm);
                StateHasChanged();
            }
        }
    }
    
    private async Task DeletePaciente(Cliente paciente)
    {
        bool? confirm = await DialogService.Confirm("Tem certeza que deseja deletar este paciente?", "Deletar Paciente");

        if (confirm == true)
        {
            try
            {
                Db.Clientes.Remove(paciente);
                await Db.SaveChangesAsync();

                pacientes.Remove(paciente);
                FilterPacientes(searchTerm);

                NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Paciente deletado com sucesso!");
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Erro", $"Erro ao deletar paciente: {ex.Message}");
            }
        }
    }
}
