@using ClinicApp.Models
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService
@inject Data.ApplicationDbContext Db
@inject NotificationService NotificationService

<RadzenTemplateForm TItem="Agendamento" Data="@model" Submit="@OnSubmit">
    <RadzenStack Gap="1rem">
        <!-- Título -->
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Título" Style="width: 6rem;" />
            <RadzenDropDown @bind-Value="@selectedTituloId"
                            Data="@titulos"
                            TextProperty="Texto"
                            ValueProperty="Id"
                            Placeholder="Selecione"
                            Style="width: 14rem;" />
        </RadzenStack>

        <!-- Cliente -->
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Paciente" Style="width: 6rem;" />
            <RadzenDropDown @bind-Value="@selectedClienteId"
                            Data="@clientes"
                            TextProperty="Nome"
                            ValueProperty="Id"
                            Placeholder="Selecione"
                            Style="width: 14rem;" />
        </RadzenStack>

        <!-- Início -->
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Início" Style="width: 6rem;" />
            <RadzenDatePicker @bind-Value="@dataInicio"
                              Name="Start"
                              ShowTime="true"
                              Style="width: 14rem;" />
        </RadzenStack>

        <!-- Fim -->
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Fim" Style="width: 6rem;" />
            <RadzenDatePicker @bind-Value="@dataFim"
                              Name="End"
                              ShowTime="true"
                              Style="width: 14rem;" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Salvar" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public Agendamento Appointment { get; set; } = new();

    Agendamento model = new();

    DateTime? dataInicio;
    DateTime? dataFim;

    List<Titulo> titulos = new();
    List<Cliente> clientes = new();

    int selectedTituloId;
    int selectedClienteId;

    protected override async Task OnInitializedAsync()
    {
        titulos = await Db.Titulo.ToListAsync();
        clientes = await Db.Clientes.ToListAsync();
    }

    protected override void OnParametersSet()
    {
        model = Appointment;

        if (model.DataAgendamento.HasValue && model.HoraInicio.HasValue)
            dataInicio = model.DataAgendamento.Value.Date.Add(model.HoraInicio.Value);

        if (model.DataAgendamento.HasValue && model.HoraFim.HasValue)
            dataFim = model.DataAgendamento.Value.Date.Add(model.HoraFim.Value);

        // Preencher os IDs selecionados para os dropdowns
        selectedTituloId = model.Titulo?.Id ?? 0;
        selectedClienteId = model.Cliente?.Id ?? 0;
    }

    async Task OnSubmit(Agendamento model)
    {
        var agendamento = await Db.Agendamentos
            .Include(a => a.Titulo)
            .Include(a => a.Cliente)
            .Include(a => a.Status)
            .FirstOrDefaultAsync(a => a.Id == model.Id);

        if (agendamento == null)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Agendamento não encontrado.");
            return;
        }

        var titulo = await Db.Titulo.FindAsync(selectedTituloId);
        var cliente = await Db.Clientes.FindAsync(selectedClienteId);
        var status = await Db.Status.FirstOrDefaultAsync(); // Altere aqui se tiver status diferente

        if (titulo == null || cliente == null || dataInicio == null)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Preencha todos os campos.");
            return;
        }

        if (dataFim == null || dataInicio > dataFim)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro", "Hora inicio é maior que hora de terminio");
            return;
        }

        agendamento.DataAgendamento = dataInicio.Value.Date;
        agendamento.HoraInicio = dataInicio.Value.TimeOfDay;
        agendamento.HoraFim = dataFim.Value.TimeOfDay;
        agendamento.Titulo = titulo;
        agendamento.Cliente = cliente;
        agendamento.Status = status!;

        await Db.SaveChangesAsync();

        NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Agendamento atualizado!");
        DialogService.Close(agendamento);
    }
}
