@using ClinicApp.Data

@inject IWebHostEnvironment Env
@inject NotificationService NotificationService
@inject ApplicationDbContext Db
@inject DialogService DialogService
@inject IJSRuntime JS

<div class="dialog-container">

    <div class="row mb-3">
        <div class="col-md-12">
            <input type="text" placeholder="Nome do Procedimento" @bind="ProcedimentoEditado.Nome" class="form-control" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <input type="number" placeholder="Pre칞o" @bind="ProcedimentoEditado.Preco" class="form-control" />
        </div>
    </div>

    <!-- Upload da Imagem Estilizado -->
    <div class="row mb-3">
        <div class="col-md-12 text-center">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Click="() => TriggerFileUpload()" Class="d-flex align-items-center gap-2">
                <RadzenIcon Icon="upload" Style="font-size: 1.5rem;" Class="text-primary" />
                Selecionar Imagem
            </RadzenButton>
            <InputFile @ref="fileInput" OnChange="OnInputFileChange" accept="image/*" style="display:none;" />

            @if (!string.IsNullOrEmpty(previewImage))
            {
                <div class="mt-3">
                    <img src="@previewImage" alt="Preview" class="img-thumbnail" style="max-width:150px; border-radius:8px;" />
                </div>
            }
        </div>
    </div>

    <!-- Bot칫es Radzen -->
    <div class="row">
        <div class="col-md-12 text-right">
            <RadzenButton Click="Salvar" Text="Salvar" ButtonStyle="ButtonStyle.Primary" class="mr-2" />
            <RadzenButton Click="Fechar" Text="Cancelar" ButtonStyle="ButtonStyle.Secondary" />
        </div>
    </div>
</div>

@code {
    private Procedimento ProcedimentoEditado = new();
    private string? previewImage;       // Base64 para preview
    private IBrowserFile? tempFile;     // Arquivo tempor치rio em mem칩ria
    private InputFile fileInput;
    
    private async Task TriggerFileUpload()
    {
        await JS.InvokeVoidAsync("triggerClick", fileInput.Element);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            tempFile = e.File;
            if (tempFile == null) return;

            // Cria um preview em Base64 sem salvar no disco ainda
            using var stream = tempFile.OpenReadStream(maxAllowedSize: 10_000_000);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            previewImage = $"data:{tempFile.ContentType};base64,{Convert.ToBase64String(bytes)}";

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Erro no preview",
                Detail = ex.Message,
                Duration = 5000
            });
        }
    }

    private async Task Salvar()
    {
        if (string.IsNullOrWhiteSpace(ProcedimentoEditado.Nome))
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Nome obrigat칩rio", "Informe o nome do procedimento.");
            return;
        }

        if (ProcedimentoEditado.Preco <= 0)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Pre칞o inv치lido", "Informe um pre칞o maior que zero.");
            return;
        }

        if (tempFile == null)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Imagem obrigat칩ria", "Selecione uma imagem antes de salvar.");
            return;
        }

        try
        {
            // 游댳 Salva a imagem no disco somente agora
            var uploadFolder = Path.Combine(Env.WebRootPath ?? Path.Combine(Directory.GetCurrentDirectory(), "wwwroot"),
                                            "images", "procedimentos");

            if (!Directory.Exists(uploadFolder))
                Directory.CreateDirectory(uploadFolder);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(tempFile.Name)}";
            var filePath = Path.Combine(uploadFolder, fileName);

            await using var stream = File.Create(filePath);
            await tempFile.OpenReadStream(maxAllowedSize: 10_000_000).CopyToAsync(stream);

            ProcedimentoEditado.UrlImage = $"/images/procedimentos/{fileName}";

            // 游댳 Salva no banco
            await Db.Procedimentos.AddAsync(ProcedimentoEditado);
            await Db.SaveChangesAsync();

            NotificationService.Notify(NotificationSeverity.Success, "Sucesso", "Procedimento salvo com sucesso!");
            DialogService.Close(ProcedimentoEditado);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro ao salvar: " + ex.Message);
        }
    }

    private void Fechar() => DialogService.Close();
}
