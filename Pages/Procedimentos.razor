@page "/procedimentos"
@using ClinicApp.Data
@using ClinicApp.Pages.Dialog
@using ClinicApp.Pages.Dialog.Procedimentos
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService

<style>
    .gradientColor{
    background: linear-gradient(90deg,rgba(42, 51, 155, 1) 0%, rgba(87, 171, 199, 1) 50%, rgba(42, 51, 155, 1) 100%);
    -webkit-background-clip: text; /* Para navegadores baseados em WebKit (Chrome, Safari) */
    background-clip: text;
    color: transparent; /* Torna a cor do texto transparente para que o gradiente apare√ßa */
    display: inline-block; /* Importante para que o gradiente se aplique corretamente ao texto */
    }

    .gradientColorEmail{
    background: #2a649b;
    background: linear-gradient(90deg, rgba(42, 100, 155, 1) 0%, rgba(47, 107, 160, 1) 0%, rgba(87, 171, 199, 1) 50%, rgba(42, 108, 155, 1) 100%);
    }

</style>


<h3 class="gradientColor" style="margin-bottom: 2px;">Procedimentos dispon√≠veis</h3>
<div style="
    width: 250px;
    height: 3px;
    background: linear-gradient(90deg,rgba(42, 51, 155, 1) 0%, rgba(87, 171, 199, 1) 50%, rgba(42, 51, 155, 1) 100%); /* Ajuste as cores do degrad√™ */
    border-radius: 2px;
    margin-top: 0;
"></div>
<br/>



<RadzenTextBox @bind-Value="filtro" Placeholder="üîç Pesquisar procedimento..." Style="width: 300px; margin-bottom: 20px;" />

<RadzenRow>
    @foreach (var item in Procedimento.Where(p => string.IsNullOrEmpty(filtro) || p.Nome.Contains(filtro, StringComparison.OrdinalIgnoreCase)))
    {
        <RadzenColumn Width="3">
            <RadzenCard Style="margin-bottom: 1rem; width: 190px;">
                <div class="p-2" style="text-align: center">
                    <h4 class="gradientColor">@item.Nome</h4>
                </div>
                <img src="@item.UrlImage" alt="@item.Nome" style="width: 100%; height: 140px; object-fit: cover; border: 8px;"/>
                <div class="p-2">
                    <p>Pre√ßo: @item.Preco.ToString("C")</p>
                </div>
                <RadzenButton 
                Text="Agendar" 
                Icon="add_circle" 
                ButtonStyle="ButtonStyle.Primary" 
                Click="@(args => AbrirDialogAgendamento(item))" 
                />
            </RadzenCard>
        </RadzenColumn>
    }

</RadzenRow>

<!-- Bot√£o flutuante -->
<div style="position: fixed; top: 40px; right: 30px; z-index: 1000;">
    <RadzenButton
    Text="Adicionar"
    Icon="add"
    ButtonStyle="ButtonStyle.Success"
    Size="ButtonSize.Medium"
    Click="@AbrirDialog" />
</div>

@code {
    List<Procedimento> Procedimento;
    string filtro = "";

    protected override async Task OnInitializedAsync()
    {
        Procedimento = await Db.Procedimentos.ToListAsync();
    }
    List<Agendamento> appointments = new();

    async Task AbrirDialogAgendamento(Procedimento procedimento)
    {
        try
        {
            var start = DateTime.Now;
            var end = start.AddHours(1);
           

            var data = await DialogService.OpenAsync<AddAppointment>(
                $"Novo Agendamento - {procedimento.Nome}", 
                new Dictionary<string, object>
                {
                    { "Start", start },
                    { "End", end },
                    { "Procedimento", procedimento } // passa objeto inteiro
                }
            );

            if (data != null)
            {
                appointments ??= new List<Agendamento>();
                appointments.Add(data);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Erro ao abrir agendamento", ex.Message);
        }
    }

    
    async Task AbrirDialog()
    {
        var result = await DialogService.OpenAsync<AddProcedimento>(
            "Novo Procedimento",
            null,
            new DialogOptions() { Width = "500px", Height = "auto" }
        );

        // Atualiza lista se salvar
        if (result is Procedimento novo)
        {
            Procedimento.Add(novo);
            StateHasChanged();
        }
    }
}

