@page "/Agenda"
@using ClinicApp.Data
@using ClinicApp.Pages.Dialog
@using ClinicApp.utils
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService

<style>
    /* Remove margens/paddings internas que quebram o arredondamento */
    .rz-scheduler {
        border-radius: 12px !important;
        overflow: hidden;
    }

    .rz-scheduler-header,
    .rz-scheduler-footer,
    .rz-scheduler-content {
        border-radius: 0 !important;
        border: none !important;
    }

    /* Remove as bordas internas duplicadas */
    .rz-scheduler-content > div {
        border: none !important;
    }

    /* Aplica visual limpo e sem conflitos */
    .rz-scheduler .rz-scheduler-header,
    .rz-scheduler .rz-scheduler-footer {
        background: #f9f9f9;
    }

    /* Remove sombras ou bordas indesejadas que atrapalham o arredondamento */
    .rz-scheduler-content {
        box-shadow: none !important;
    }
</style>


<div style="justify-items: center">
<RadzenStack Orientation="Orientation.Horizontal"
             AlignItems="AlignItems.Center"
             Gap="0.5rem" class="rz-p-4 rz-mb-6 rz-border-radius-1"
             Style="border: 1px solid #ccc; height:3rem; border-radius: 10px; width: 940px;">
    <RadzenLabel Text="Show Header:  " />
    <RadzenSwitch @bind-Value=@showHeader />
</RadzenStack>
</div>
<div style="justify-items: center">
    <RadzenScheduler @ref=@scheduler 
                     SlotRender=@OnSlotRender
                     Style="height: 570px; width: 940px; border: 1px solid #ccc; border-radius: 12px; overflow: hidden;"
                     TItem="Appointment"
                     Data=@appointments
                     StartProperty="Start"
                     EndProperty="End"
                     ShowHeader=@showHeader
                     TextProperty="Text"
                     SelectedIndex="2"
                     SlotSelect=@OnSlotSelect
                     AppointmentSelect=@OnAppointmentSelect
                     AppointmentRender=@OnAppointmentRender
                     DaySelect="@OnDaySelect"
    
                     AppointmentMove=@OnAppointmentMove >
    
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    
    </RadzenScheduler>
</div>


<EventConsole @ref=@console />
@code {
    
    [Inject] public ApplicationDbContext Db { get; set; }

    IList<Appointment> appointments = new List<Appointment>();
    
    protected override async Task OnInitializedAsync()
    {
        appointments = await Db.Agendamentos
            .Where(a => a.DataAgendamento != null)
            .Select(a => new Appointment
            {
                Start = a.DataAgendamento.Value,
                End = a.DataAgendamento.Value.AddHours(1), // ou outro tempo
                Text = a.Cliente.Nome
            })
            .ToListAsync();
    }
    
    RadzenScheduler<Appointment> scheduler;
    EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    bool showHeader = true;
    
    /*
    IList<Appointment> appointments = new List<Appointment>
    {
        new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };
    */
    void OnDaySelect(SchedulerDaySelectEventArgs args)
    {
        console.Log($"DaySelect: Day={args.Day} AppointmentCount={args.Appointments.Count()}");
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        console.Log($"SlotSelect: Start={args.Start} End={args.End}");

        if (args.View.Text != "Year")
        {
            Appointment data = await DialogService.OpenAsync<AddAppointment>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            Text = args.Data.Text
        };

        var data = await DialogService.OpenAsync<EditAppointment>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Text = data.Text;
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            var duration = draggedAppointment.End - draggedAppointment.Start;

            if (args.SlotDate.TimeOfDay == TimeSpan.Zero)
            {
                draggedAppointment.Start = args.SlotDate.Date.Add(draggedAppointment.Start.TimeOfDay);
            }
            else
            {
                draggedAppointment.Start = args.SlotDate;
            }

            draggedAppointment.End = draggedAppointment.Start.Add(duration);

            await scheduler.Reload();
        }
    }
}